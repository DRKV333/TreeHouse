@using System
@using System.Collections.Generic
@using System.Linq
@using RazorBlade
@using TreeHouse.Common
@using TreeHouse.PacketFormat

@namespace TreeHouse.PacketDocs.Codegen

@inherits PlainTextTemplate<PacketFormatDocument>

/// <auto-generated />

using TreeHouse.PacketParser.Support;

namespace TreeHouse.PacketParser;

@functions
{
    public static string FormatId(byte id, byte subId)
    {
        uint ids = (uint)id | ((uint)subId << 8);
		return $"0x{ids:X4}";
    }

    public void RenderStructure(string name, StructureBuilder builder)
    {
        @:  public partial struct @name : ISpanReadWrite
        @:  {
        @:      @builder.GetMembers()
        @:
        @:      public void Read(SpanReader reader)
        @:      {
        @:          @builder.GetRead()
        @:      }
        @:
        @:      public readonly void Write(SpanWriter writer)
        @:      {
        @:          @builder.GetWrite()
        @:      }
        @:  }
    }
}

@{
    SizeResolver resolver = new();
    List<(string name, SizeEstimateBuilder builder)> structSizeEstimates = new();
    List<(string name, SizeEstimateBuilder builder)> packetSizeEstimates = new();
}

@foreach (var item in Model.Structures)
{
    string name = StructureBuilder.ConvertTypeName(item.Key);
    StructureBuilder builder = new(resolver.CreateSelfToken(name));
    structSizeEstimates.Add((name, builder.SizeEstimateBuilder));
    builder.AppendFieldsList(item.Value);
    RenderStructure(name, builder);
}

@foreach (var item in Model.Packets)
{
    string className = StructureBuilder.ConvertTypeName(item.Key); 

    StructureBuilder builder = new(resolver.CreateSelfToken(className));

    string? baseType = item.Value.Inherit;
    if (baseType != null)
    {
        builder.AppendField(new Field() {
            Name = $"Base{StructureBuilder.ConvertTypeName(baseType)}",
            Type = new PrimitiveFieldType() { Value = $":{baseType}" }
        });
    }

    builder.AppendFieldsList(item.Value);

    if (item.Value.Id == 0 && item.Value.SubId == 0)
    {
        RenderStructure(className, builder);
        structSizeEstimates.Add((className, builder.SizeEstimateBuilder));
    }
    else
    {
        @:  public partial class @className : PacketBranch
        @:  {
        @:      @builder.GetMembers()
        @:
        @:      public @(className)()
        @:      {
        @:          PacketId = @(FormatId(item.Value.Id, item.Value.SubId));
        @:      }
        @:
        @:      public override void Read(SpanReader reader)
        @:      {
        @:          @builder.GetRead()
        @:      }
        @:
        @:      public override void Write(SpanWriter writer)
        @:      {
        @:          @builder.GetWrite()
        @:      }
        @:  }

        packetSizeEstimates.Add((className, builder.SizeEstimateBuilder));
    }
}

@foreach (var item in structSizeEstimates)
{
    @:  public partial struct @item.name
    @:  {
    @:      public readonly int EstimateSize() => @(item.builder.GetSizeEstimate());
    @:  }
}

@foreach (var item in packetSizeEstimates)
{
    @:  public partial class @item.name
    @:  {
    @:      public override int EstimateSize() => @(item.builder.GetSizeEstimate());
    @:  }
}

public struct Packet : ISpanReadWrite
{
    private static readonly global::System.Collections.Generic.Dictionary<ushort, global::System.Func<PacketBranch>> idToPacketFactory = new()
    {
        @foreach (var item in Model.Packets.Where(x => !(x.Value.Id == 0 && x.Value.SubId == 0)))
        {
            @: { @FormatId(item.Value.Id, item.Value.SubId), () => new @(StructureBuilder.ConvertTypeName(item.Key))() },
        }
    };

    public PacketBranch Branch;

    public readonly int EstimateSize() => 2 + Branch.EstimateSize();

    public void Read(SpanReader reader)
    {
        ushort id = reader.ReadUInt16LE();
        Branch = idToPacketFactory[id]();
        Branch.Read(reader);
    }

    public readonly void Write(SpanWriter writer)
    {
        writer.WriteUInt16LE(Branch.PacketId);
        Branch.Write(writer);
    }
}

public abstract class PacketBranch : ISpanReadWrite
{
    public ushort PacketId { get; protected init; }

    public abstract void Read(SpanReader reader);

    public abstract int EstimateSize();

    public abstract void Write(SpanWriter writer);
}