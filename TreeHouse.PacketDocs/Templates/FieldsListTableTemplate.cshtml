@using System
@using System.Linq
@using System.Text
@using Markdig
@using Markdig.Parsers
@using TreeHouse.PacketFormat
@using TreeHouse.PacketDocs.Markdown
@using RazorBlade

@namespace TreeHouse.PacketDocs.Templates

@inherits HtmlTemplate<(FieldsList list, MarkdownPipeline descriptionPipeline)>

@functions {
    private static readonly string[] BranchColors = new[]
    {
        "table-info",
        "table-warning",
        "table-danger",
        "table-success"
    };

    private void MakeFieldsTableRows(FieldsList fields, int maxBranchDepth, int currentBranchDepth)
    {
        foreach (IFieldItem item in fields.Fields)
        {
            MakeFieldsTableRow(item, maxBranchDepth, currentBranchDepth);
        }
    }

    private void MakeFieldsTableRow(IFieldItem fieldItem, int maxBranchDepth, int currentBranchDepth)
    {
        if (fieldItem is Field field)
        {
            <tr>
                @{ MakeBranchPaddingColumns(currentBranchDepth); }
                <td colspan="@(maxBranchDepth - currentBranchDepth + 1)">@TypeText(field.Type)</td>
                <td>@field.Name</td>
                @if (field.Description != null)
                {
                    <td>@(new MarkdownContent(Model.descriptionPipeline, Markdown.Parse(field.Description)))</td>
                }
                else
                {
                    <td></td>
                }
            </tr>
        }
        else if (fieldItem is Branch branch)
        {
            string conditionText;
            if (branch.Details.TestEqual != null)
                conditionText = $"{branch.Details.Field} = {branch.Details.TestEqual}";
            else if (branch.Details.TestFlag != null)
                conditionText = $"{branch.Details.Field} & {branch.Details.TestFlag}";
            else
                conditionText = branch.Details.Field;

            MakeFullSpanRow(maxBranchDepth, currentBranchDepth, branch.Details.IsTrue != null ? $"if ({conditionText})" : $"if not ({conditionText})");

            if (branch.Details.IsTrue != null)
                MakeFieldsTableRows(branch.Details.IsTrue, maxBranchDepth, currentBranchDepth + 1);

            if (branch.Details.IsTrue != null && branch.Details.IsFalse != null)
                MakeFullSpanRow(maxBranchDepth, currentBranchDepth, "else");

            if (branch.Details.IsFalse != null)
                MakeFieldsTableRows(branch.Details.IsFalse, maxBranchDepth, currentBranchDepth + 1);

            MakeFullSpanRow(maxBranchDepth, currentBranchDepth, "endif");
        }
    }

    private void MakeFullSpanRow(int maxBranchDepth, int currentBranchDepth, string content)
    {
        <tr class="@BranchColor(currentBranchDepth)">
            @{ MakeBranchPaddingColumns(currentBranchDepth); }
            <th scope="row" colspan="@(maxBranchDepth + 3)">@content</th>
        </tr>
    }

    private void MakeBranchPaddingColumns(int currentBranchDepth)
    {
        for (int i = 0; i < currentBranchDepth; i++)
        {
            <td class="@BranchColor(i) w-0"></td>
        }
    }

    private static string BranchColor(int depth) => BranchColors[depth % BranchColors.Length];

    private static int MaxBranchDepth(FieldsList? fields)
    {
        if (fields == null)
            return 0;

        int depth = 0;
        foreach (IFieldItem item in fields.Fields)
        {
            if (item is Branch branch)
            {
                int innerDepth = Math.Max(MaxBranchDepth(branch.Details.IsTrue), MaxBranchDepth(branch.Details.IsFalse));
                depth = Math.Max(depth, innerDepth + 1);
            }
        }

        return depth;
    }

    private string TypeText(IFieldType type) => type switch
    {
        PrimitiveFieldType primitive => primitive.Value,
        LimitedStringFieldType limited => $"{limited.Name}(\u2264{limited.Maxlen})",
        ArrayFieldType array => $"{array.Type}[{array.Len}]",
        EnumFieldType anEnum => anEnum.Name, // TODO
        _ => "?"
    };
}

@{ int maxBranchDepth = MaxBranchDepth(Model.list); }

@if (Model.list.Description != null)
{
    <p>@(new MarkdownContent(Model.descriptionPipeline, MarkdownParser.Parse(Model.list.Description)))</p>
}

<table class="table mb-5">
    <thead>
        <tr>
            <th scope="col" colspan="@(maxBranchDepth + 1)">Type</th>
            <th scope="col">Name</th>
            <th scope="col">Description</th>
        </tr>
    </thead>
    <tbody>
        @{ MakeFieldsTableRows(Model.list, maxBranchDepth, 0); }
    </tbody>
</table>
