@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using MongoDB.Bson;
@using BlazorBootstrap
@using TreeHouse.QuestEditor.Services
@using TreeHouse.QuestModels.Elasticsearch
@using TreeHouse.QuestModels.Mongo

@page "/details/{id}"

@inject MongoDbService mongoDbService
@inject ElasticsearchService elasticService
@inject IJSRuntime js

@attribute [StreamRendering]

<PageTitle>@data.Name</PageTitle>

<div>
    <div class="btn-group btn-group-sm mb-3">
        @if (prevId == null) {
            <a class="btn btn-primary disabled"><Icon Name="IconName.CaretLeft" /></a>
        } else {
            <a class="btn btn-primary" href="details/@prevId"><Icon Name="IconName.CaretLeft" /></a>
        }

        @if (nextId == null) {
            <a class="btn btn-primary disabled"><Icon Name="IconName.CaretRight" /></a>
        } else {
            <a class="btn btn-primary" href="details/@nextId"><Icon Name="IconName.CaretRight" /></a>
        }
    </div>

    <h1 class="mb-5">@data.Name</h1>

    <EditForm class="container" EditContext="@editContext">
        <div class="row mb-3">
            <label for="input-name" class="col-2 col-form-label">Name:</label>
            <div class="col-10">
                <ElasticAutoComplete id="input-name" SearchDelegate="elasticService.AutoCompleteQuestName" @bind-TextValue="data.Name" @bind-IdValue="data.Id" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="input-desc" class="col-2 col-form-label">Description:</label>
            <div class="col-10">
                <textarea id="input-desc" class="form-control" rows="5" disabled>@quest.Desc</textarea>
            </div>
        </div>
        <div class="row mb-3">
            <label for="input-cond" class="col-2 col-form-label">Conditions:</label>
            <div class="col-10">
                <textarea id="input-cond" class="form-control" rows="5" disabled>@ConditionText</textarea>
            </div>
        </div>
        <div class="row mb-3">
            <label for="input-level" class="col-2 col-form-label">Level:</label>
            <div class="col-10">
                <NumberInput id="input-level" TValue="int?" @bind-Value="data.Level" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="input-exp" class="col-2 col-form-label">Exp:</label>
            <div class="col-10">
                <NumberInput id="input-exp" TValue="int?" @bind-Value="data.Exp" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="input-bits" class="col-2 col-form-label">Bits:</label>
            <div class="col-10">
                <NumberInput id="input-bits" TValue="int?" @bind-Value="data.Bits" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="input-comments" class="col-2 col-form-label">Comments:</label>
            <div class="col-10">
                <TextAreaInput id="input-comments" @bind-Value="data.Comments" Rows="5" />
            </div>
        </div>
        <div class="row mb-3">
            <label class="col-2 col-form-label">Dialog:</label>
            <div class="col-10">
                <BindableSortableList TItem="DialogData" @bind-Data="data.Dialogs">
                    <ItemTemplate Context="dialog">
                        <BindableSortableList TItem="DialogLine" @bind-Data="dialog.Lines">
                            <ItemTemplate Context="line">
                                <DialogLineView LineData="line" />
                            </ItemTemplate>
                        </BindableSortableList>
                    </ItemTemplate>
                </BindableSortableList>
            </div>
        </div>
    </EditForm>

    <div @ref="saveAnim" class="save-fab save-anim bg-success text-success-emphasis fs-3 rounded-4 p-1 m-3 text-center">
        <Icon Name="IconName.FloppyFill" />
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; } = null!;

    private ElementReference saveAnim;

    private EditContext editContext = null!;

    private QuestData data = new();

    private Quest quest = new();

    private string ConditionText => quest.Condition == null ? "" : string.Join("\n", quest.Condition);

    private string? prevId;

    private string? nextId;

    protected override void OnInitialized()
    {
        editContext = new EditContext(data);
    }

    protected override async Task OnParametersSetAsync()
    {
        data = await mongoDbService.GetByMongoId(Id);
        StateHasChanged();

        await FetchElasticQuest();

        editContext = new EditContext(data);
        editContext.OnFieldChanged += async (s, e) => {
            if (data.MongoId != ObjectId.Empty && editContext.Validate())
            {
                await mongoDbService.Update(data);
                await js.InvokeVoidAsync("olResetAnimation", saveAnim);

                if (e.FieldIdentifier.Model == data && e.FieldIdentifier.FieldName == nameof(data.Id))
                {
                    await FetchElasticQuest();
                    StateHasChanged();
                }
            }
        };

        StateHasChanged();

        prevId = await mongoDbService.GetIdByOrder(data.Order - 1);
        nextId = await mongoDbService.GetIdByOrder(data.Order + 1);
    }

    private async Task FetchElasticQuest()
    {
        quest = await elasticService.GetQuestById(data.Id);
    }
}