@using Microsoft.AspNetCore.Components.Forms
@using BlazorBootstrap
@using System.Linq.Expressions
@using TreeHouse.QuestEditor.Services

@inherits ComponentBase

<CascadingValue TValue="EditContext" Value="null">
    <AutoComplete
        Id="@Id"
        TItem="ElasticAutoCompleteResult"
        PropertyName="Content"
        DataProvider="DataProvider"
        Class="@CssClass"
        OnChanged="OnChanged"
        @bind-Value="TextValue"
    />
</CascadingValue>

@code {
    [CascadingParameter]
    private EditContext? EditContext { get; set; }

    [Parameter]
    public string TextValue { get; set; } = "";

    [Parameter]
    public EventCallback<string> TextValueChanged { get; set; }

    [Parameter]
    public long IdValue { get; set; }

    [Parameter]
    public EventCallback<long> IdValueChanged { get; set; }

    [Parameter]
    public Expression<Func<long>>? IdValueExpression { get; set; }

    private FieldIdentifier idValueFieldIdentifier;

    private string? CssClass => EditContext?.FieldCssClass(idValueFieldIdentifier);

    [Parameter]
    public string? Id { get; set; }

    private bool isValid = true;

    private ValidationMessageStore? messageStore;

    [Parameter]
    [EditorRequired]
    public Func<string, Task<IReadOnlyList<ElasticAutoCompleteResult>>> SearchDelegate { get; set; } = null!;

    private async Task<AutoCompleteDataProviderResult<ElasticAutoCompleteResult>> DataProvider(AutoCompleteDataProviderRequest<ElasticAutoCompleteResult> request)
    {
        IReadOnlyList<ElasticAutoCompleteResult> result = await SearchDelegate(request.Filter.Value);

        return new AutoCompleteDataProviderResult<ElasticAutoCompleteResult>()
        {
            Data = result,
            TotalCount = result.Count
        };
    }

    private async Task OnChanged(ElasticAutoCompleteResult item)
    {
        if (item == null)
        {
            isValid = false;
            return;
        }

        isValid = true;

        await TextValueChanged.InvokeAsync(item.Content);

        IdValue = item.Id;
        await IdValueChanged.InvokeAsync(item.Id);
        EditContext?.NotifyFieldChanged(idValueFieldIdentifier);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore!.Clear();
        if (!isValid)
            messageStore!.Add(idValueFieldIdentifier, "Selection is not valid.");
    }

    protected override void OnInitialized()
    {
        if (IdValueExpression != null)
            idValueFieldIdentifier = FieldIdentifier.Create(IdValueExpression);

        if (EditContext != null)
        {
            messageStore = new ValidationMessageStore(EditContext);
            EditContext.OnValidationRequested += HandleValidationRequested;
        }
    }
}