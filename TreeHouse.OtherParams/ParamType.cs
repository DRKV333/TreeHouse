using System;

namespace TreeHouse.OtherParams;

public enum ParamType : byte
{
    Unknown = 0x00,
    String = 0x01,
    StringPair = 0x02,
    StringFloatPair = 0x03,
    StringSet1 = 0x04,
    Guid = 0x05,
    GuidPair = 0x06,
    Bool = 0x07,
    Int = 0x08,
    BitField128 = 0x09,
    BitSetFilter = 0x0A,
    Float = 0x0B,
    FloatRange = 0x0C,
    Vector3 = 0x0D,
    Vector4 = 0x0E,
    LocalizedString = 0x0F,
    AvatarID = 0x10,
    UniqueID = 0x11,
    JSON = 0x12,
    Int64 = 0x13,
    Quaternion = 0x14,
    Positionable = 0x15,
    ContentRef = 0x16,
    ContentRefAndInt = 0x17,
    ContentRefAndFloat = 0x18,
    ContentRefList = 0x19,
    ClassRefPowerRangeList = 0x1A,
    Expression = 0x1B,
    ParamSet = 0x1C,
    IntVector = 0x1D,
    Int64Vector = 0x1E,
    FloatVector = 0x1F,
    StringVector = 0x20,
    StringSet2 = 0x21,
    GuidSet = 0x22,
    AvatarIDSet = 0x23,
    AvatarIDVector = 0x24,
    CGuidSet = 0x25,
    CGuidVector = 0x26,
    StringIntHashmap = 0x27,
    StringStringHashmap = 0x28,
    Any = 0x29,
    LocalizedStringVector = 0x2A,
    InstanceGroup = 0x2B,
    AnyVector = 0x2C
}

public static class ParamTypeUtils
{
    public static ParamType FromString(string str) => str switch
    {
        "Unknown" => ParamType.Unknown,
        "String" or "string" => ParamType.String,
        "StringPair" or "stringPair" => ParamType.StringPair,
        "StringFloatPair" or "stringFloatPair" => ParamType.StringFloatPair,
        "StringSet" => ParamType.StringSet1,
        "Guid" or "guid" => ParamType.Guid,
        "GuidPair" or "guidPair" => ParamType.GuidPair,
        "Bool" or "bool" => ParamType.Bool,
        "Int" or "int" => ParamType.Int,
        "BitField128" or "bitfield128" => ParamType.BitField128,
        "BitSetFilter" or "bitSetFilter" => ParamType.BitSetFilter,
        "Float" or "float" => ParamType.Float,
        "FloatRange" or "floatRange" => ParamType.FloatRange,
        "Vector3" or "vector3" => ParamType.Vector3,
        "Vector4" => ParamType.Vector4,
        "LocalizedString" => ParamType.LocalizedString,
        "AvatarID" or "avatarID" => ParamType.AvatarID,
        "UniqueID" or "uniqueID" => ParamType.UniqueID,
        "JSON" => ParamType.JSON,
        "Int64" or "int64" => ParamType.Int64,
        "oaQuaternion" => ParamType.Quaternion,
        "oaPositionable" => ParamType.Positionable,
        "ContentRef" => ParamType.ContentRef,
        "ContentRefAndInt" => ParamType.ContentRefAndInt,
        "ContentRefAndFloat" => ParamType.ContentRefAndFloat,
        "ContentRefList" => ParamType.ContentRefList,
        "ClassRefPowerRangeList" => ParamType.ClassRefPowerRangeList,
        "Expression" => ParamType.Expression,
        "ParamSet" or "paramset" => ParamType.ParamSet,
        "Int_vector" or "vector<int>" => ParamType.IntVector,
        "Int64_vector" or "vector<int64>" => ParamType.Int64Vector,
        "Float_vector" or "vector<float>" => ParamType.FloatVector,
        "String_vector" or "vector<string>" => ParamType.StringVector,
        "String_set" or "set<string>" => ParamType.StringSet2,
        "Guid_set" => ParamType.GuidSet,
        "AvatarID_set" or "set<avatarID>" => ParamType.AvatarIDSet,
        "AvatarID_vector" or "vector<avatarID>" => ParamType.AvatarIDVector,
        "oaSetGuid" or "set<CGuid>" => ParamType.CGuidSet,
        "oaVectorGuid" or "vector<CGuid>" => ParamType.CGuidVector,
        "String_int_hashmap" or "hash_map<string,int>" => ParamType.StringIntHashmap,
        "String_String_hashmap" or "hash_map<string,string>" => ParamType.StringStringHashmap,
        "Any" => ParamType.Any,
        "oaVectorLocalizedString" => ParamType.LocalizedStringVector,
        "oaInstanceGroup" or "instanceGroup" => ParamType.InstanceGroup,
        "Any_vactor" => ParamType.AnyVector, // SIC
        _ => throw new ArgumentException($"Unknown param type: {str}", nameof(str))
    };

    public static string ToCanonicalString(ParamType type) => type switch
    {
        ParamType.Unknown => "",
        ParamType.String => "String",
        ParamType.StringPair => "StringPair",
        ParamType.StringFloatPair => "StringFloatPair",
        ParamType.StringSet1 => "StringSet",
        ParamType.Guid => "Guid",
        ParamType.GuidPair => "GuidPair",
        ParamType.Bool => "Bool",
        ParamType.Int => "Int",
        ParamType.BitField128 => "BitField128",
        ParamType.BitSetFilter => "BitSetFilter",
        ParamType.Float => "Float",
        ParamType.FloatRange => "FloatRange",
        ParamType.Vector3 => "Vector3",
        ParamType.Vector4 => "Vector4",
        ParamType.LocalizedString => "LocalizedString",
        ParamType.AvatarID => "AvatarID",
        ParamType.UniqueID => "UniqueID",
        ParamType.JSON => "JSON",
        ParamType.Int64 => "Int64",
        ParamType.Quaternion => "oaQuaternion",
        ParamType.Positionable => "oaPositionable",
        ParamType.ContentRef => "ContentRef",
        ParamType.ContentRefAndInt => "ContentRefAndInt",
        ParamType.ContentRefAndFloat => "ContentRefAndFloat",
        ParamType.ContentRefList => "ContentRefList",
        ParamType.ClassRefPowerRangeList => "ClassRefPowerRangeList",
        ParamType.Expression => "Expression",
        ParamType.ParamSet => "ParamSet",
        ParamType.IntVector => "Int_vector",
        ParamType.Int64Vector => "Int64_vector",
        ParamType.FloatVector => "Float_vector",
        ParamType.StringVector => "String_vector",
        ParamType.StringSet2 => "String_set",
        ParamType.GuidSet => "Guid_set",
        ParamType.AvatarIDSet => "AvatarID_set",
        ParamType.AvatarIDVector => "AvatarID_vector",
        ParamType.CGuidSet => "oaSetGuid",
        ParamType.CGuidVector => "oaVectorGuid",
        ParamType.StringIntHashmap => "String_int_hashmap",
        ParamType.StringStringHashmap => "String_String_hashmap",
        ParamType.Any => "Any",
        ParamType.LocalizedStringVector => "oaVectorLocalizedString",
        ParamType.InstanceGroup => "oaInstanceGroup",
        ParamType.AnyVector => "Any_vactor", // SIC
        _ => throw new ArgumentException($"Unknown param type: {type}", nameof(type))
    };
}